name: Build - Windows

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "src/**"
      - ".github/workflows/build-windows.yml"
  merge_group:
  push:
    paths:
      - "src/**"
      - ".github/workflows/build-windows.yml"
    branches:
      - main

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  MAKEFLAGS: "-j 2"

jobs:
  cancel-runs:
    if: github.event_name == 'pull_request' && github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  build:
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    name: ${{ matrix.os }}-${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}

    concurrency:
      group: otclient-${{ github.workflow }}-${{ github.ref }}-${{ matrix.buildtype }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022]
        buildtype: [windows-release, windows-debug]
        include:
          - os: windows-2022
            triplet: x64-windows-static
            packages: sccache

    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: CCache with SCCACHE
        uses: hendrikmuhs/ccache-action@main
        with:
          max-size: "1G"
          variant: "sccache"
          key: ccache-${{ matrix.os }}-${{ matrix.buildtype }}
          restore-keys: |
            ccache-${{ matrix.os }}-${{ matrix.buildtype }}

      - name: Remove Windows pre-installed MySQL (for clean builds)
        run: Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "C:/mysql*"

      - name: Extract vcpkg commit ID
        id: vcpkg-step
        shell: pwsh
        run: |
          $json = Get-Content vcpkg.json -Raw | ConvertFrom-Json
          $commit = $json.'builtin-baseline'
          "VCPKG_GIT_COMMIT_ID=$commit" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install vcpkg (for MSBuild)
        if: ${{ matrix.buildtype == 'windows-debug' }}
        shell: pwsh
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          git checkout $env:VCPKG_GIT_COMMIT_ID
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install

      - name: Install vcpkg (for CMake)
        if: ${{ matrix.buildtype == 'windows-release' }}
        uses: lukka/run-vcpkg@main
        with:
          vcpkgGitURL: "https://github.com/microsoft/vcpkg.git"
          vcpkgGitCommitId: ${{ env.VCPKG_GIT_COMMIT_ID }}

      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@v3.31.6

      - name: Setup MSBuild
        if: ${{ matrix.buildtype == 'windows-debug' }}
        uses: microsoft/setup-msbuild@v1.1

      - name: Build using CMake or MSBuild
        shell: pwsh
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          if ("${{ matrix.buildtype }}" -eq "windows-release") {
            cmake --preset ${{ matrix.buildtype }}
            cmake --build --preset ${{ matrix.buildtype }}
          } elseif ("${{ matrix.buildtype }}" -eq "windows-debug") {
            msbuild.exe vc17/otclient.sln `
              /p:VcpkgEnableManifest=true `
              /p:Configuration=Debug `
              /p:Platform=x64 `
              /p:GITHUB_WORKSPACE="$env:GITHUB_WORKSPACE" `
              /m
          } else {
            Write-Host "Unknown buildtype: ${{ matrix.buildtype }}"
            exit 1
          }

      - name: Upload Executable Artifact (CMake)
        if: ${{ matrix.buildtype == 'windows-release' }}
        uses: actions/upload-artifact@main
        with:
          name: otclient-${{ matrix.os }}-${{ matrix.buildtype }}-${{ github.sha }}
          path: |
            ${{ github.workspace }}/build/${{ matrix.buildtype }}/bin/otclient.exe

      - name: Upload Executable Artifact (MSBuild)
        if: ${{ matrix.buildtype == 'windows-debug' }}
        uses: actions/upload-artifact@main
        with:
          name: otclient-${{ matrix.os }}-${{ matrix.buildtype }}-${{ github.sha }}
          path: |
            ${{ github.workspace }}/vc17/otclient.exe
